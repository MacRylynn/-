#include<opencv2\opencv.hpp>
#include<iostream>
#include<fstream>
#include<vector>

using namespace std;
using namespace cv;
using namespace cv::ml;

#define imageSize Size(256,512)// 所需检测图片的大小 图片分辨率越大检测越精确，但是消耗的资源越大
#define HardExampleNO 0 // hard negative num 暂时不管
#define AugPosSamNO 0 //Aug positive num 暂时不管
#define TRAIN false 
#define CENTRAL_CROP true


/***********************颜色检测函数******************************/
void ColorTest (Mat src,int Xpos,int Ypos,int ImgWidth,int ImgHeight)
{
	/*ColorTest (Mat src,int Xpos,int Ypos,int ImgWidth,int ImgHeight)参数详解
	src:      传进的需要检测图像
	Xpos:     需要检测图像区域左上角的x值
	Ypos:     需要检测图像区域左上角的y值
	ImgWidth: 需要检测区域的宽
	ImgHeight:需要检测区域的高*/
	Mat HSVimg;
	vector<Mat> channels;
	Mat RGBimg = src.clone();
	RGBimg = RGBimg(Rect(Xpos, Ypos, ImgWidth, ImgHeight));
	//***********************判断颜色******************************//
	cvtColor(RGBimg, HSVimg, CV_RGB2HSV);//RGB转为HSV
	split(HSVimg, channels); //分离并且获取每一个通道
	Mat Hchannel, Schannel, Vchannel;
	Vchannel = channels[2];
	Schannel = channels[1];
	Hchannel = channels[0];//得到H,S,V通道
	//判断颜色类型
	int Redcounter = 0, Yellowcounter = 0, Blackcounter = 0;
	float Hvalue, Svalue, Vvalue;
	for (int i = 0; i < Vchannel.rows; ++i)
	{
		for (int j = 0; j < Vchannel.cols; ++j)
		{
			//获取每个点的HSV各个通道的值
			Hvalue = Hchannel.at<uchar>(i, j);
			Svalue = Schannel.at<uchar>(i, j);
			Vvalue = Vchannel.at<uchar>(i, j);
			/*cout << Hvalue << "   " << Svalue << "   " << Vvalue << endl;*/
			//找到符合范围的点
			if (((Hvalue > 105 && Hvalue < 130) && (Svalue > 43 && Svalue < 255)) && (Vvalue > 46 && Vvalue < 255))
			Redcounter++;
			else if (((Hvalue > 0 && Hvalue < 180) && (Svalue > 0 && Svalue < 255)) && (Vvalue >0 && Vvalue <46))
			Blackcounter++;
			else if (((Hvalue > 90 && Hvalue < 105) && (Svalue >43 &&Svalue < 255)) && (Vvalue > 46 &&Vvalue < 255))
			Yellowcounter++;
		}
	}
	//输出每个颜色点的个数
	/*cout << "红点：" << Redcounter << endl << "黄点：" << Yellowcounter<<endl << "黑点：" << Blackcounter << endl;*/
	//判断颜色
	cout << "颜色判断......"<<endl;
	if ((Redcounter > Yellowcounter) && (Redcounter > Blackcounter))
		cout << "该样本是:红色" << "、";
	else if ((Yellowcounter > Redcounter) && (Yellowcounter > Blackcounter))
		cout << "该样本是:黄色" << "、";
	else if ((Blackcounter > Redcounter) && (Blackcounter > Yellowcounter))
		cout << "该样本是:黑色" << "、";
	else
		cout << "颜色检测检测失败" << "、";
}
/***********************样本训练函数******************************/
void StateSVM(int PosSamNO,int NegSamNO,char* PathPos,char* PathNeg)
{
	/*StateSVM(int PosSamNO,int NegSamNO,char* PathPos,char* PathNeg)参数详解
	PosSamNO:正样本的个数
	NegSamNO:负样本的个数
	PathPos: 正样本的路径
	PathNeg: 负样本的路径
	注   意：正样本的个数应该尽量和负样本个数一致*/
	HOGDescriptor hog(imageSize, Size(16, 16), Size(8, 8), Size(8, 8), 9, 1, 1, 0.2, 1, 1, 64, 1);
	int DescriptorDim;
	Ptr<SVM> svm = SVM::create();
	string ImgName;
	ifstream finPos("positive_samples.txt");
	ifstream finNeg("negative_samples.txt");

	if (!finPos || !finNeg)
	{
		cout << "Pos/Neg imglist reading failed..." << endl;
	}

	Mat sampleFeatureMat;
	Mat sampleLabelMat;

	//loading original positive examples...
	for (int num = 0; num < PosSamNO && getline(finPos, ImgName); num++)
	{
		cout << "Now processing original positive image: " << ImgName << endl;
		ImgName = PathPos + ImgName;
		Mat src = imread(ImgName);

		//if (CENTRAL_CROP)
		//	src = src(Rect(16, 16, 64, 128));
		resize(src, src, imageSize);
		vector<float> descriptors;
		hog.compute(src, descriptors, Size(1, 1));//计算HOG描述子，检测窗口移动步长(8,8)

		if (0 == num)
		{
			DescriptorDim = descriptors.size();
			sampleFeatureMat = Mat::zeros(PosSamNO + AugPosSamNO + NegSamNO + HardExampleNO, DescriptorDim, CV_32FC1);
			sampleLabelMat = Mat::zeros(PosSamNO + AugPosSamNO + NegSamNO + HardExampleNO, 1, CV_32SC1);//sampleLabelMat的数据类型必须为有符号整数型
		}

		//将计算好的HOG描述子复制到样本特征矩阵sampleFeatureMat
		for (int i = 0; i<DescriptorDim; i++)
			sampleFeatureMat.at<float>(num, i) = descriptors[i];
		sampleLabelMat.at<int>(num, 0) = 1;
	}
	finPos.close();

	//positive examples augmenting...
	/*if (AugPosSamNO > 0)
	{
	ifstream finAug("DATA/AugPosImgList.txt");
	if (!finAug)
	{
	cout << "Aug positive imglist reading failed..." << endl;
	return 1;
	}
	for (int num = 0; num < AugPosSamNO && getline(finAug, ImgName); ++num)
	{
	cout << "Now processing Aug positive image: " << ImgName << endl;
	//ImgName = "DATA/INRIAPerson/AugPos/" + ImgName;
	Mat src = imread(ImgName);
	vector<float> descriptors;
	hog.compute(src, descriptors, Size(8, 8));
	for (int i = 0; i < DescriptorDim; ++i)
	sampleFeatureMat.at<float>(num + PosSamNO, i) = descriptors[i];
	sampleLabelMat.at<int>(num + PosSamNO, 0) = 1;
	}
	finAug.close();
	}*/

	//loading original negative examples...
	for (int num = 0; num < NegSamNO && getline(finNeg, ImgName); num++)
	{
		cout << "Now processing original negative image: " << ImgName << endl;
		ImgName = PathNeg + ImgName;
		Mat src = imread(ImgName);
		cv::resize(src, src, imageSize);
		vector<float> descriptors;
		hog.compute(src, descriptors, Size(1, 1));

		for (int i = 0; i<DescriptorDim; i++)
			sampleFeatureMat.at<float>(num + PosSamNO, i) = descriptors[i];
		sampleLabelMat.at<int>(num + PosSamNO + AugPosSamNO, 0) = -1;

	}
	finNeg.close();
	//loading hard examples...
	/*if (HardExampleNO > 0)
	{
	ifstream finHardExample("hard_samples_d.txt");
	if (!finHardExample)
	{
	cout << "HardExample list reading failed..." << endl;
	return 1;
	}

	for (int num = 0; num < HardExampleNO && getline(finHardExample, ImgName); num++)
	{
	cout << "Now processing hard negative image: " << ImgName << endl;
	Mat src = imread(ImgName);
	cv::resize(src, src, cv::Size(64, 128));
	vector<float> descriptors;
	hog.compute(src, descriptors, Size(8, 8));

	for (int i = 0; i<DescriptorDim; i++)
	sampleFeatureMat.at<float>(num + PosSamNO + NegSamNO, i) = descriptors[i];
	sampleLabelMat.at<int>(num + PosSamNO + AugPosSamNO + NegSamNO, 0) = -1;
	}
	finHardExample.close();
	}*/

	svm->setType(SVM::C_SVC);
	svm->setC(0.001);
	svm->setKernel(SVM::RBF);
	svm->setTermCriteria(TermCriteria(TermCriteria::MAX_ITER, 3000, 6e-3));

	cout << "Starting training..." << endl;
	svm->train(sampleFeatureMat, ROW_SAMPLE, sampleLabelMat);
	cout << "Finishing training..." << endl;
	cout << "Start to save XML result" << endl;
	svm->save("SVM_HOG.xml");
	cout << "Finising saving" << endl;

}
/***********************状态检测函数******************************/
void StateTest(Mat ORGimg,int StateValue)
{
	Ptr<SVM> svm = StatModel::load<SVM>("SVM_HOG.xml");
	Mat svecsmat = svm->getSupportVectors();//svecsmat元素的数据类型为float
	int svdim = svm->getVarCount();//特征向量位数
	int numofsv = svecsmat.rows;
	Mat alphamat = Mat::zeros(numofsv, svdim, CV_32F);//alphamat和svindex必须初始化，否则getDecisionFunction()函数会报错
	Mat svindex = Mat::zeros(1, numofsv, CV_64F);

	Mat Result;
	double rho = svm->getDecisionFunction(0, alphamat, svindex);
	alphamat.convertTo(alphamat, CV_32F);//将alphamat元素的数据类型重新转成CV_32F
	Result = -1 * alphamat * svecsmat;//float

	vector<float> vec;
	for (int i = 0; i < svdim; ++i)
	{
		vec.push_back(Result.at<float>(0, i));
	}
	vec.push_back(rho);
	//saving HOGDetectorForOpenCV.txt
	ofstream fout("HOGDetectorForOpenCV.txt");
	for (int i = 0; i < vec.size(); ++i)
	{
		fout << vec[i] << endl;
	}
	/*********************************Testing**************************************************/
	//Mat src = imread("G12.jpg");//读入图像
	Mat src = ORGimg.clone();
	cv::resize(src, src, imageSize);
	HOGDescriptor hog_test(imageSize, Size(16, 16), Size(8, 8), Size(8, 8), 9, 1, 1, 0.2, 1, 1, 64, 1);
	hog_test.setSVMDetector(vec);//使用自己的训练器
	vector<float> descriptors;
	hog_test.compute(src, descriptors, Size(1, 1), Size(0, 0));
	/*cout << "The Detection Result:" << endl;
	cout << "HOG dims: " << descriptors.size() << endl;*/
	Mat SVMtrainMat = Mat::zeros(1, descriptors.size(), CV_32F);
	int n = 0;
	for (vector<float>::iterator iter = descriptors.begin(); iter != descriptors.end(); iter++)
	{
		SVMtrainMat.at<float>(0, n) = *iter;
		n++;
	}
	float ret = svm->predict(SVMtrainMat);
	/*cout << ret << endl;*/
	if (ret == 1)
	{
		StateValue = 1;
	}
	else
	{
		StateValue = 0;
	}
} 

int main()
{
	char* path1 = "F:\\实验室项目\\白带和粪便\\粪便颜色和形状识别\\ColorState\\ColorState\\liquid\\";//正样本的路径
	char* path2 = "F:\\实验室项目\\白带和粪便\\粪便颜色和形状识别\\ColorState\\ColorState\\solid\\";//负样本的路径
	char* path3 = "F:\\实验室项目\\白带和粪便\\粪便颜色和形状识别\\ColorState\\ColorState\\test\\";//测试图片路径
	StateSVM(10,10,path1,path2);//调用训练函数/需要训练时调用/检测时不用调用
	/*StateSVM(int PosSamNO,int NegSamNO,char* PathPos,char* PathNeg)参数详解
	     PosSamNO:正样本的个数
		   NegSamNO:负样本的个数
		   PathPos: 正样本的路径
		   PathNeg: 负样本的路径
		   注   意：正样本的个数应该尽量和负样本个数一致*/
	ifstream Testimg("Testimg.txt");
	string ImgName;
	int Counter = 0;
	while (getline(Testimg,ImgName))
	{
		ImgName = path3 + ImgName;
		Mat src = imread(ImgName);
		ColorTest(src,155,121,38,330);//颜色判断
		/*ColorTest (Mat src,int Xpos,int Ypos,int ImgWidth,int ImgHeight)参数详解
				src:      传进的需要检测图像
				Xpos:     需要检测图像区域左上角的x值
				Ypos:     需要检测图像区域左上角的y值
				ImgWidth: 需要检测区域的宽
				ImgHeight:需要检测区域的高*/
		int StateValue =0;
		StateTest(src,StateValue);//状态判断
		//imshow("src", src);
	}
	waitKey(0);
	system("pause");
	return 0;

}
